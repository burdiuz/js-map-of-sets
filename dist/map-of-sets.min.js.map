{"version":3,"file":"map-of-sets.min.js","sources":["../source/index.js"],"sourcesContent":["\r\nexport class MapOfSets {\r\n  constructor() {\r\n    this.storage = new Map();\r\n  }\r\n\r\n  /**\r\n   * Check if key exists\r\n   * @param {*} key\r\n   */\r\n  has(key) {\r\n    const values = this.storage.get(key);\r\n\r\n    return values && values.size;\r\n  }\r\n\r\n  /**\r\n   * Check if value exists for key\r\n   * @param {*} key\r\n   * @param {*} value\r\n   */\r\n  hasValue(key, value) {\r\n    const values = this.storage.get(key);\r\n\r\n    return values && values.has(value);\r\n  }\r\n\r\n  /**\r\n   * Get Set of values for key\r\n   * @param {*} key\r\n   */\r\n  get(key) {\r\n    return this.storage.get(key);\r\n  }\r\n\r\n  /**\r\n   * List values for key, returns empty array if no key nor values stored\r\n   * @param {*} key\r\n   */\r\n  list(key) {\r\n    const values = this.storage.get(key);\r\n\r\n    return values ? Array.from(values) : [];\r\n  }\r\n\r\n  /**\r\n   * Call callback for each value of each key\r\n   *  callback (value:*, key:*, storage:*):void\r\n   * @param {Function} callback\r\n   */\r\n  forEach(callback) {\r\n    this.storage.forEach((values, key) => values.forEach((value) => callback(value, key, this)));\r\n  }\r\n\r\n  /**\r\n   * Call callback function for each value of specified key\r\n   *  callback (value:*, key:*, storage:*):void\r\n   * @param {*} key\r\n   * @param {Function} callback\r\n   */\r\n  eachValue(key, callback) {\r\n    const values = this.storage.get(key);\r\n\r\n    if (values) {\r\n      values.forEach((value) => callback(value, key, this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add to new value to key.\r\n   * @param {*} key\r\n   * @param {*} value\r\n   */\r\n  add(key, value) {\r\n    const values = this.storage.get(key);\r\n\r\n    if (values) {\r\n      values.add(value);\r\n    } else {\r\n      this.storage.set(key, new Set([value]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replace all values for key\r\n   * @param {*} key\r\n   * @param {Set} types\r\n   */\r\n  set(key, values) {\r\n    if (!values || values.size === 0) {\r\n      this.remove(key);\r\n      return;\r\n    }\r\n\r\n    this.storage.set(key, new Set(values));\r\n  }\r\n\r\n  /**\r\n   * Remove all values for key\r\n   * @param {*} key\r\n   */\r\n  remove(key) {\r\n    this.storage.delete(key);\r\n  }\r\n\r\n  /**\r\n   * Remove single value from key\r\n   * @param {*} key\r\n   * @param {*} value\r\n   */\r\n  removeValue(key, value) {\r\n    const values = this.storage.get(key);\r\n\r\n    if (values) {\r\n      values.delete(value);\r\n\r\n      if (!values.size) {\r\n        this.remove(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone all key-value stores\r\n   */\r\n  clone() {\r\n    const target = new MapOfSets();\r\n    this.storage.forEach((values, key) => target.set(key, new Set(values)));\r\n\r\n    return target;\r\n  }\r\n}\r\n\r\nexport const createMapOfSets = () => new MapOfSets();\r\n\r\nexport default MapOfSets;\r\n"],"names":["MapOfSets","constructor","storage","Map","has","key","values","this","get","size","hasValue","value","list","Array","from","forEach","callback","eachValue","add","set","Set","remove","delete","removeValue","clone","target"],"mappings":"4LACO,MAAMA,EACXC,mBACOC,QAAU,IAAIC,IAOrBC,IAAIC,SACIC,EAASC,KAAKL,QAAQM,IAAIH,UAEzBC,GAAUA,EAAOG,KAQ1BC,SAASL,EAAKM,SACNL,EAASC,KAAKL,QAAQM,IAAIH,UAEzBC,GAAUA,EAAOF,IAAIO,GAO9BH,IAAIH,UACKE,KAAKL,QAAQM,IAAIH,GAO1BO,KAAKP,SACGC,EAASC,KAAKL,QAAQM,IAAIH,UAEzBC,EAASO,MAAMC,KAAKR,GAAU,GAQvCS,QAAQC,QACDd,QAAQa,QAAQ,CAACT,EAAQD,IAAQC,EAAOS,QAASJ,GAAUK,EAASL,EAAON,EAAKE,QASvFU,UAAUZ,EAAKW,SACPV,EAASC,KAAKL,QAAQM,IAAIH,GAE5BC,GACFA,EAAOS,QAASJ,GAAUK,EAASL,EAAON,EAAKE,OASnDW,IAAIb,EAAKM,SACDL,EAASC,KAAKL,QAAQM,IAAIH,GAE5BC,EACFA,EAAOY,IAAIP,QAENT,QAAQiB,IAAId,EAAK,IAAIe,IAAI,CAACT,KASnCQ,IAAId,EAAKC,GACFA,GAA0B,IAAhBA,EAAOG,UAKjBP,QAAQiB,IAAId,EAAK,IAAIe,IAAId,SAJvBe,OAAOhB,GAWhBgB,OAAOhB,QACAH,QAAQoB,OAAOjB,GAQtBkB,YAAYlB,EAAKM,SACTL,EAASC,KAAKL,QAAQM,IAAIH,GAE5BC,IACFA,EAAOgB,OAAOX,GAETL,EAAOG,WACLY,OAAOhB,IAQlBmB,cACQC,EAAS,IAAIzB,cACdE,QAAQa,QAAQ,CAACT,EAAQD,IAAQoB,EAAON,IAAId,EAAK,IAAIe,IAAId,KAEvDmB,mCAIoB,KAAM,IAAIzB"}
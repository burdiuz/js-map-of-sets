!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.MapOfSets={})}(this,function(e){"use strict";class t{constructor(){this.storage=new Map}has(e){const t=this.storage.get(e);return t&&t.size}hasValue(e,t){const s=this.storage.get(e);return s&&s.has(t)}get(e){return this.storage.get(e)}list(e){const t=this.storage.get(e);return t?Array.from(t):[]}forEach(e){this.storage.forEach((t,s)=>t.forEach(t=>e(t,s,this)))}eachValue(e,t){const s=this.storage.get(e);s&&s.forEach(s=>t(s,e,this))}add(e,t){if(!t)return;const s=this.storage.get(e);s?s.add(t):this.storage.set(e,new Set([t]))}set(e,t){t&&0!==t.size?this.storage.set(e,new Set(t)):this.remove(e)}remove(e){this.storage.delete(e)}removeValue(e,t){const s=this.storage.get(e);s&&(s.delete(t),s.size||this.remove(e))}clone(){const e=new t;return this.storage.forEach((t,s)=>e.set(s,new Set(t))),e}}e.MapOfSets=t,e.createMapOfSets=(()=>new t),e.default=t,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=map-of-sets.min.js.map
